import speech_recognition as sr
import subprocess
import os
import time 
import pywhatkit
import pyautogui
from twilio.rest import Client
import cv2
from pynput.keyboard import Key, Controller
from geopy.geocoders import Nominatim
keyboard = Controller()
from PIL import Image, ImageDraw
from googlesearch import search
import boto3
import tkinter as tk
from tkinter import simpledialog
from geopy.geocoders import Nominatim
from tkinter import messagebox
def open_software(software_name):
    software_path = {
        "notepad": "notepad.exe",
        "calculator": "calc.exe",
        "paint": "mspaint.exe",
        "chrome":r"C:\Program Files\Google\Chrome\Application\chrome.exe",
        "command prompt":r"C:\Windows\System32\cmd.exe",
        "explorer":"explorer.exe",
        "vlc":r"C:\Program Files (x86)\VideoLAN\VLC\vlc.exe",
         "taskmgr":r"C:\Windows\System32\taskmgr.exe",
        # Add more software names and paths here
    }

    if software_name in software_path:
        try:
            subprocess.run(software_path[software_name])
        except Exception as e:
            status_label.config(text=f"Error: {e}")
    else:
        status_label.config(text="Software not found.")
    pass

def whatsapp():
    from pynput.keyboard import Key, Controller
    keyboard = Controller()
    try:
        pywhatkit.sendwhatmsg_instantly(
            phone_no="+9760736251", 
            message="Hello Linux World",
            tab_close=True
        )
        time.sleep(20)
        pyautogui.click()
        time.sleep(5)
        keyboard.press(Key.enter)
        keyboard.release(Key.enter)
        print("Message sent!")
    except Exception as e:
        print(str(e))
        
        
def message():

        client = Client("AC39df9b5371d70d011422b50c00ad1408", "b30460e4fd84223ba4c20e1982644faa")
        client.messages.create(to="+919927493185", 
                               from_="+14177364758", 
                               body="Hello Linux World!")


def click_photo():

   cap=cv2.VideoCapture(0)
   cap
   status ,photo =cap.read()
   cv2.imwrite("pic.jpg",photo)
   cv2.imshow("My photo",photo)
   cv2.waitKey(5000)
   cv2.destroyAllWindows()
   cap.release()

def crop_pic():
   cap=cv2.VideoCapture(0)
   cap
   status ,photo =cap.read()
   cv2.imwrite("pic.jpg",photo)
   cv2.imshow("My photo",photo[200:540,200:430])
   cv2.waitKey(5000)
   cv2.destroyAllWindows()
   cap.release()
    

def capture_video():
    cap=cv2.VideoCapture(0)
    while True:
        status ,photo=cap.read()
        cv2.imshow("My photo",photo)
        if cv2.waitKey(5)==13:
            break
    cv2.destroyAllWindows()

def capture_crop_video():
    cap=cv2.VideoCapture(0)
    while True:
        status ,photo=cap.read()
        photo[0:200,0:200]=photo[200:400,200:400]
        cv2.imshow("My photo",photo)
        if cv2.waitKey(5)==13:
            break
    cv2.destroyAllWindows()

    
def image_100_100():
    width, height = 100, 100
    image = Image.new("RGB", (width, height), (255, 255, 255))
    draw = ImageDraw.Draw(image)
    stripe_height = height // 3
    draw.rectangle([(0, 0), (width, stripe_height)], fill=(255, 153, 51))
    draw.rectangle([(0, stripe_height), (width, 2 * stripe_height)], fill=(255, 255, 255))
    draw.rectangle([(0, 2 * stripe_height), (width, height)], fill=(0, 128, 0))
    chakra_radius = min(width, height) // 8
    chakra_center = (width // 2, stripe_height + (stripe_height // 2))
    draw.ellipse(
    [
        (chakra_center[0] - chakra_radius, chakra_center[1] - chakra_radius),
        (chakra_center[0] + chakra_radius, chakra_center[1] + chakra_radius),
    ],
    fill=(0, 56, 168),
    )

    image.save("indian_flag.png")
    image.show()


    
def get_coordinates():
    location_name = simpledialog.askstring("User Input", "Enter place:")
    
    if location_name:
        geolocator = Nominatim(user_agent="location_finder")
        location = geolocator.geocode(location_name)
        
        if location is None:
            messagebox.showerror("Error", f"Coordinates not found for '{location_name}'.")
        else:
            latitude = location.latitude
            longitude = location.longitude
            result_str = f"Coordinates for '{location_name}': Latitude = {latitude}, Longitude = {longitude}."
            messagebox.showinfo("Coordinates", result_str)
    

def top_10_google_searches():
    query=input("search here")
    try:
        search_results = list(search(query, num_results=10))
        print("Top 10 Google Searches for '{}':".format(query))
        for index, result in enumerate(search_results, start=1):
            print(f"{index}. {result}")
    except Exception as e:
        print("Error: ", str(e))
        
        
def launch_instance():
    launch = boto3.client('ec2',region_name='ap-south-1')
    launch.run_instances(
        ImageId='ami-0ded8326293d3201b',
        InstanceType='t2.micro',
        MaxCount=1,
        MinCount=1
        )
    describe_instance = boto3.client('ec2')
    describe_instance.describe_instances()
    
def create_bucket():
    bucket_name = simpledialog.askstring("Bucket Name", "Enter bucket name:")
    if bucket_name:
        s3_client = boto3.client('s3', region_name='ap-south-1')
        s3_client.create_bucket(
            Bucket=bucket_name,
            ACL='private',
            CreateBucketConfiguration={
                'LocationConstraint': 'ap-south-1'
            }
        )
        messagebox.showinfo("Bucket Created", f"Bucket '{bucket_name}' created successfully!")
    else:
        messagebox.showwarning("Bucket Creation", "No bucket name provided.")
    
    
def use_sns_service():
    sns = boto3.client('sns',region_name='ap-south-1')
    sns.publish(
    Message='Dont take it serious.',
    Subject='this is automatd sns service.',
    TopicArn='arn:aws:sns:ap-south-1:299592517672:python_menu'
    )
    print("email sent")
    

def clear_status():
    status_label.config(text="cleared")

def create_button(parent, label, command):
    button = tk.Button(parent,font=("Arial",10,"bold"), text=label,width=20,height=2, command=command)
    return button


root = tk.Tk()
root.title("Main Window")
root.geometry("1200x900")
root.configure(bg="lightgreen")

title_label = tk.Label(root, text="Welcome to GUI Based Menu",width=30,height=2, font="title_font", fg="blue")
title_label.pack(pady=15)

open_button = tk.Button(root, text="Open Software",fg="red",font=("Arial", 20, "bold"),width=25,command=lambda: open_software(software_entry.get().lower()))
open_button.pack()

software_entry = tk.Entry(root,width=64)
software_entry.pack(pady=20)


buttons_frame = tk.Frame(root, bg="lightblue")
buttons_frame.pack(padx=20, pady=20, fill="both", expand=True)


button_notepad = create_button(buttons_frame, "NOTEPAD",lambda: open_software("notepad"))
button_calculator = create_button(buttons_frame, "CALCULATOR", lambda: open_software("calculator"))
button_paint = create_button(buttons_frame, "PAINT", lambda: open_software("paint"))
button_chrome = create_button(buttons_frame, "CHROME", lambda: open_software("chrome"))
button_cmd = create_button(buttons_frame, "COMMAND PROMPT", lambda:os.system("cmd.exe"))
button_explorer = create_button(buttons_frame, "EXPLORER", lambda: open_software("explorer"))
button_vlc = create_button(buttons_frame, "VLC", lambda: open_software("vlc"))
button_taskmgr = create_button(buttons_frame, "TASK MANAGER",lambda: subprocess.getoutput("taskmgr.exe"))
button_whatsapp = create_button(buttons_frame, "SEND WHATSAPP", whatsapp)
button_message = create_button(buttons_frame, "SEND MESSAGE", message)
button_photo = create_button(buttons_frame, "CLICK PHOTO",click_photo)
button_croppic = create_button(buttons_frame, "CROP PHOTO",crop_pic)
button_video = create_button(buttons_frame, "CAPTURE VIDEO",capture_video)
button_cropvideo = create_button(buttons_frame,"CROP VIDEO",capture_crop_video)
button_image= create_button(buttons_frame,"IMAGE 100*100",image_100_100)
button_coordinates = create_button(buttons_frame,"GEO COORDINATES" ,lambda:get_coordinates())
button_searchresults = create_button(buttons_frame,"TOP10GOOGLESEARCHES",lambda:top_10_google_searches())
button_launchinstance = create_button(buttons_frame,"LAUNCH INSTANCE",launch_instance)
button_createbucket = create_button(buttons_frame,"CREATE BUCKET",create_bucket)
button_usesnsservice = create_button(buttons_frame,"USE SNS SERVICE",use_sns_service)

button_notepad.grid(row=0, column=0, padx=10, pady=20)
button_calculator.grid(row=0, column=1, padx=20, pady=20)
button_paint.grid(row=0, column=2, padx=30, pady=20)
button_chrome.grid(row=0, column=3, padx=10, pady=20)
button_cmd.grid(row=1, column=0, padx=20, pady=20)
button_explorer.grid(row=1, column=1, padx=30, pady=20)
button_vlc.grid(row=1, column=2, padx=10, pady=20)
button_taskmgr.grid(row=1, column=3, padx=10, pady=20)
button_whatsapp.grid(row=2, column=0, padx=20, pady=20)
button_message.grid(row=2, column=1, padx=30, pady=20)
button_photo.grid(row=2, column=2, padx=20, pady=20)
button_croppic.grid(row=2, column=3, padx=30, pady=20)
button_video.grid(row=3, column=0, padx=40, pady=20)
button_cropvideo.grid(row=3, column=1, padx=50, pady=20)
button_image.grid(row=3, column=2,padx=40, pady=20)
button_coordinates.grid(row=3, column=3, padx=50, pady=20)
button_searchresults.grid(row=4, column=0, padx=40, pady=20) 
button_launchinstance.grid(row=4, column=1, padx=40, pady=20)
button_createbucket.grid(row=4, column=2, padx=40, pady=20)
button_usesnsservice.grid(row=4, column=3, padx=40, pady=20)

status_label = tk.Label(root, text="", fg="red")
status_label.pack(pady=10)

clear_button = tk.Button(root, text="Clear Status",fg="blue",font=("Arial", 20, "bold"),width=25 ,command=clear_status)
clear_button.pack()

root.mainloop()
